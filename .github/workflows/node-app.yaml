name: Node application

on:
  push:
  pull_request:
    paths:
      - 'result/**'
      - '.github/workflows/node-app.yaml'
      - '.github/workflows/container-build.yaml'

env:
  NODE_VERSION: 13

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.workspace }}/result
    outputs:
      runtime-version: ${{ steps.set-result.outputs.result }}
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: ./result/package-lock.json

      - name: Install
        run: npm ci

      - name: Check if Dirty
        uses: ./.github/actions/check-dirty-repo

      - name: Export Runtime Version
        uses: actions/github-script@v6
        id: set-result
        with:
          script: return "${{ env.NODE_VERSION }}"
          result-encoding: string

  container:
    needs:
      - build
    permissions:
      packages: write
      contents: read
    uses: ./.github/workflows/container-build.yaml
    with:
      MICROSERVICE: result
      BUILD-ARGS: "NODE_VERSION=${{ needs.build.outputs.runtime-version }}"

  smoke-test:
    needs: [container]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.workspace }}/result
    env:
      PORT: 8080
    steps:
      - uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Bring up the Application
        run: docker compose up -d --quiet-pull
        env:
          REPOSITORY_OWNER: ${{ github.repository_owner }}

      - name: Run Smoke Test
        run: |
          set -x; WAIT_TIME=0; MAX_RETRIES=5;
          until [ "${WAIT_TIME}" -eq "${MAX_RETRIES}" ] || curl -q ${TEST_URL} 2>/dev/null; do
            echo "Waiting for ${TEST_URL} to come up"
            WAIT_TIME=$(( WAIT_TIME + 1 ))
            sleep "${WAIT_TIME}"
          done;
          test "${WAIT_TIME}" -lt "${MAX_RETRIES}";
        env:
          TEST_URL: "localhost:${{ env.PORT }}"

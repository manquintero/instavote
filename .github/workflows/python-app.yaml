name: Python application

on:
  push:
  pull_request:

permissions:
  contents: read

env:
  PYTHON_VERSION: "3.11"

jobs:
  build:
    permissions:
      checks: write
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.workspace }}/vote

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        id: pytest
        run: |
          test_results="${PWD}/test-results.xml"
          pytest --junit-xml "${test_results}"

          # Generate Output
          echo "report_paths=${test_results}" | tee -a $GITHUB_OUTPUT
        env:
          PYTHONPATH: ${{ github.workspace }}/vote

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if: success() || failure() # always run even if the previous step fails
        with:
          report_paths: ${{ steps.pytest.outputs.report_paths }}
          detailed_summary: true
          include_passed: true

      - name: Generate Coverage
        id: coverage
        run: |
          pytest --cov --cov-report=xml

          # Expose Coverage path
          path=$(realpath --relative-to=${{ github.workspace }} coverage.xml)
          echo "path=${path}" | tee -a $GITHUB_OUTPUT
        env:
          PYTHONPATH: ${{ github.workspace }}/vote

      - name: Publish Coverage
        uses: 5monkeys/cobertura-action@master
        with:
          path: ${{ steps.coverage.outputs.path }}
          minimum_coverage: 70
          fail_below_threshold: true
          show_line: true
          show_branch: true

      - name: Check Dirty Repository
        run: |
          if ! git diff-index --quiet HEAD; then
            echo "::error::Dirty repository found"
            git status --porcelain
            exit 1
          fi

  container:
    runs-on: ubuntu-latest
    needs:
      - build
    permissions:
      packages: write
      contents: read
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          push: true
          context: "{{defaultContext}}:vote"
          build-args: PYTHON_VERSION=${{ env.PYTHON_VERSION }}
          file: Dockerfile-scratch
          tags: ghcr.io/${{ github.repository_owner }}/vote:latest
